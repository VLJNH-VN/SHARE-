const fs = require('fs');
const chalk = require('chalk');
const inquirer = require('inquirer');
const XLSX = require('xlsx');
const figlet = require('figlet');
const boxen = require('boxen');
const googleTTS = require('google-tts-api');
const open = require('open');
const dayjs = require('dayjs');
const { generateMultipleChoiceQuestions } = require('./gemini');

const vocabFile = 'vocab.xlsx';
const grammarFile = 'grammar.json';
const progressFile = 'progress.json';
const historyFile = 'history.json';
const dailyQuizFile = 'daily_quiz.json';

// Load data
function loadVocab() {
    const wb = XLSX.readFile(vocabFile);
    return XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
}
function loadGrammar() {
    return JSON.parse(fs.readFileSync(grammarFile, 'utf8'));
}
function loadProgress() {
    if (fs.existsSync(progressFile)) return JSON.parse(fs.readFileSync(progressFile, 'utf8'));
    return { total: 0, correct: 0, wrong: 0, wrongWords: [] };
}
function saveProgress(p) {
    fs.writeFileSync(progressFile, JSON.stringify(p, null, 2));
}
function saveHistory(date, correct, total) {
    let h = []; if (fs.existsSync(historyFile)) h = JSON.parse(fs.readFileSync(historyFile));
    h.push({ date, correct, total });
    fs.writeFileSync(historyFile, JSON.stringify(h, null, 2));
}

// Shuffle array
function shuffle(a) {
    for (let i = a.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1)); [a[i], a[j]] = [a[j], a[i]];
    }
}

// Ph√°t √¢m
async function speak(word) {
    try {
        const url = googleTTS.getAudioUrl(word, { lang: 'ko' }); await open(url);
    } catch { console.log(chalk.red('‚ö†Ô∏è Kh√¥ng th·ªÉ ph√°t √¢m.')); }
}

// Auto sync data
function autoSyncData() {
    if (fs.existsSync('vocab_update.xlsx')) {
        fs.copyFileSync('vocab_update.xlsx', vocabFile);
        console.log(chalk.green('üîÑ ƒê√£ c·∫≠p nh·∫≠t vocab.xlsx'));
        fs.unlinkSync('vocab_update.xlsx');
    }
    if (fs.existsSync('grammar_update.json')) {
        fs.copyFileSync('grammar_update.json', grammarFile);
        console.log(chalk.green('üîÑ ƒê√£ c·∫≠p nh·∫≠t grammar.json'));
        fs.unlinkSync('grammar_update.json');
    }
}

// T·ª± t·∫°o quiz h√†ng ng√†y
async function autoCreateDailyQuiz() {
    const today = dayjs().format('YYYY-MM-DD');
    if (fs.existsSync(dailyQuizFile)) {
        const data = JSON.parse(fs.readFileSync(dailyQuizFile));
        if (data.date === today) return;
    }
    const vocab = loadVocab(); shuffle(vocab);
    const quiz = vocab.slice(0, 5); // 5 c√¢u t·ª´ data
    const aiQuestions = await generateMultipleChoiceQuestions("Ng·ªØ ph√°p ƒë·ªãnh ng·ªØ (Îäî)", 3);
    aiQuestions.forEach(q => quiz.push({ ai: true, ...q }));
    fs.writeFileSync(dailyQuizFile, JSON.stringify({ date: today, quiz }, null, 2));
    console.log(chalk.green('‚úÖ ƒê√£ t·ª± t·∫°o b√†i ki·ªÉm tra 15p h√¥m nay!'));
}

// Quiz tr·∫Øc nghi·ªám (H√†n ‚Üí Vi·ªát)
function createChoices(correct, vocab, key) {
    const choices = [correct[key]];
    while (choices.length < 4) {
        const r = vocab[Math.floor(Math.random() * vocab.length)][key];
        if (!choices.includes(r)) choices.push(r);
    }
    shuffle(choices);
    return choices;
}
async function startQuizMultipleChoice(vocab) {
    let p = loadProgress(); shuffle(vocab);
    for (const item of vocab) {
        await speak(item.kr);
        const choices = createChoices(item, vocab, 'vi');
        const { answer } = await inquirer.prompt([{ type: 'list', name: 'answer', message: `üëâ "${chalk.yellow(item.kr)}" nghƒ©a l√† g√¨?`, choices }]);
        p.total++;
        if (answer === item.vi) { console.log(chalk.green('‚úÖ ƒê√∫ng!')); p.correct++; p.wrongWords = p.wrongWords.filter(w => w.kr !== item.kr); }
        else { console.log(chalk.red(`‚ùå Sai! ƒê√°p √°n: ${item.vi}`)); p.wrong++; if (!p.wrongWords.find(w => w.kr === item.kr)) p.wrongWords.push(item); }
        saveProgress(p);
    }
    const percent = ((p.correct / p.total) * 100).toFixed(1);
    console.log(chalk.magenta('\nüìä K·∫øt th√∫c!')); console.log(`T·ªïng: ${p.total}`); console.log(chalk.green(`ƒê√∫ng: ${p.correct}`)); console.log(chalk.red(`Sai: ${p.wrong}`)); console.log(chalk.cyan(`üéØ Ch√≠nh x√°c: ${percent}%`));
    saveHistory(dayjs().format('YYYY-MM-DD'), p.correct, p.total);
}

// Quiz h√†ng ng√†y
async function startDailyQuiz() {
    if (!fs.existsSync(dailyQuizFile)) {
        console.log(chalk.red('‚ö†Ô∏è Ch∆∞a c√≥ quiz h√¥m nay!')); return;
    }
    const data = JSON.parse(fs.readFileSync(dailyQuizFile));
    console.log(chalk.yellow(`\nüìù B√†i ki·ªÉm tra ng√†y ${data.date}`));
    for (const q of data.quiz) {
        if (q.ai && q.choices) {
            const { answer } = await inquirer.prompt([{ type: 'list', name: 'answer', message: `ü§ñ ${q.question}`, choices: q.choices }]);
            if (answer === q.answer) console.log(chalk.green('‚úÖ ƒê√∫ng!'));
            else console.log(chalk.red(`‚ùå Sai! ƒê√°p √°n: ${q.answer}`));
        } else {
            await speak(q.kr);
            const { answer } = await inquirer.prompt([{ type: 'input', name: 'answer', message: `üëâ "${q.kr}" nghƒ©a l√† g√¨?` }]);
            if (answer.trim() === q.vi.trim()) console.log(chalk.green('‚úÖ ƒê√∫ng!'));
            else console.log(chalk.red(`‚ùå Sai! ƒê√°p √°n: ${q.vi}`));
        }
    }
}

// Hi·ªán ng·ªØ ph√°p
function showGrammar() {
    const g = loadGrammar();
    console.log(chalk.yellow('\nüìö Ng·ªØ ph√°p:'));
    g.forEach(item => {
        console.log(chalk.cyan(`\nüîπ ${item.name}\n${item.explain}`));
        item.examples.forEach(ex => console.log(`üëâ ${ex.kr} = ${ex.vi}`));
    });
}

// Hi·ªán l·ªãch s·ª≠
function showHistory() {
    if (!fs.existsSync(historyFile)) { console.log(chalk.yellow('‚è≥ Ch∆∞a c√≥ l·ªãch s·ª≠.')); return; }
    const h = JSON.parse(fs.readFileSync(historyFile));
    console.log(chalk.magenta('\nüìÖ L·ªãch s·ª≠ h·ªçc:'));
    h.forEach(i => console.log(`${i.date} ‚Üí ‚úÖ ${i.correct}/${i.total}`));
}

// Reset
function resetProgress() { saveProgress({ total: 0, correct: 0, wrong: 0, wrongWords: [] }); console.log(chalk.green('‚úÖ ƒê√£ reset ti·∫øn tr√¨nh!')); }

// Menu
async function menu() {
    console.clear();
    console.log(boxen(chalk.cyanBright(figlet.textSync('Korean Quiz', { font: 'Slant' })), { padding: 1, borderColor: 'yellow' }));
    while (1) {
        const { choice } = await inquirer.prompt([{
            type: 'list', name: 'choice', message: chalk.blueBright('\nüìå Ch·ªçn ch·∫ø ƒë·ªô:'), choices: [
                'üéÆ Quiz tr·∫Øc nghi·ªám (H√†n ‚Üí Vi·ªát)', 'üß† Quiz h√†ng ng√†y (15p)', 'üìÖ Xem l·ªãch s·ª≠', 'üìñ Xem ng·ªØ ph√°p', 'üîÑ Reset', '‚ùå Tho√°t'
            ]
        }]);
        if (choice === 'üéÆ Quiz tr·∫Øc nghi·ªám (H√†n ‚Üí Vi·ªát)') {
            const v = loadVocab(); if (v.length === 0) console.log(chalk.red('‚ö†Ô∏è vocab.xlsx ch∆∞a c√≥ d·ªØ li·ªáu!')); else await startQuizMultipleChoice(v);
        } else if (choice === 'üß† Quiz h√†ng ng√†y (15p)') {
            await startDailyQuiz();
        } else if (choice === 'üìÖ Xem l·ªãch s·ª≠') showHistory();
        else if (choice === 'üìñ Xem ng·ªØ ph√°p') showGrammar();
        else if (choice === 'üîÑ Reset') resetProgress();
        else { console.log(chalk.green('üëã T·∫°m bi·ªát!')); break; }
    }
}

// Kh·ªüi ƒë·ªông
(async () => {
    autoSyncData();
    await autoCreateDailyQuiz();
    await menu();
})();
